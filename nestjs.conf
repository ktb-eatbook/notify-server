# 설정 파일
# 현재 /etc/nginx/conf.d/default.conf에 마운트 되어 기본 설정을 대체 하고 있음

# Load Balancing 설정
upstream backend {
    # server {호스트}:{포트} 옵션들...;
    # ec2에 경우 어차피 같은 vpc 내에서 있을 테니 localhost로 지정해주자
    # weight=n = 업스트림 서버의 비중을 나타낸다. 이 값을 2로 설정하면 그렇지 않은 서버에 비해 두배 더 자주 선택된다
    # max_fails=n = n으로 지정한 횟수만큼 실패가 일어나면 서버가 죽은 것으로 간주한다
    # fail_timeout=n = max_fails가 지정된 상태에서 이 값이 설정만큼 서버가 응답하지 않으면 죽은 것으로 간주한다
    # down = 해당 서버를 사용하지 않게 지정한다. ip_hash; 지시어가 설정된 상태에서만 유효하다
    # backup = 모든 서버가 동작하지 않을 때 backup으로 표시된 서버가 사용되고 그 전까지는 사용되지 않는다
    server notify-server-server-1:3001 fail_timeout=10s;
    server notify-server-server-2:3001 fail_timeout=10s;
    server notify-server-server-3:3001 fail_timeout=10s;

    # nginx 유료 버전부터 사용 가능
    # uri = 헬스 체크 엔드 포인트
    # interval = 헬스 체크 요청 간격
    # fall = 서버가 죽었음을 판단하는 실패 횟수
    # rise = 서버가 살아있음을 판단하는 성공 횟수
    # timeout = 요청 타임아웃
    # health_check uri=/health interval=3s fall=2 rise=1 timeout=6s;
}

# 서버 설정
server {
    listen 80;

    server_name localhost;

    location / {
        # http://{알림 서버 컨테이너 | 아이피}:{포트}
        # 컨테이너를 지정할 경우 포트는 필요 없음
        proxy_pass http://backend;
        # http 프로토콜 버전
        proxy_http_version 1.1;
        # $ 뒤에 오는 값은 Nginx 내장 변수들

        # HTTP 헤더의 Upgrade 필드 값입니다.
        # 주로 WebSocket과 같은 프로토콜 업그레이드 요청에서 사용됩니다.
        # 예: 클라이언트가 WebSocket을 요청할 때, Upgrade 헤더 값으로 websocket이 들어오게 됩니다.
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # HTTP 요청의 Host 헤더 값입니다.
        # 예를 들어 클라이언트가 http://example.com으로 요청하면, $host에는 example.com이 들어갑니다.
        proxy_set_header Host $host;

        # $http_*:
        # HTTP 요청의 특정 헤더를 참조할 때 사용됩니다.
        # $http_ 뒤에 헤더 이름을 소문자로 연결합니다.
        # 예:
        # Upgrade 헤더 값: $http_upgrade
        # User-Agent 헤더 값: $http_user_agent

        # proxy_cache_bypass:
        # 캐시 무효화를 제어하는 Nginx 변수로, $http_upgrade와 함께 사용하면 WebSocket 같은 특정 요청에서 캐시를 우회하도록 설정합니다.
        # $http_upgrade 값이 설정되면 캐시를 사용하지 않고 바로 백엔드로 요청을 전달합니다.
        proxy_cache_bypass $http_upgrade;
    } 

    # health check를 위한 엔드 포인트
    # 해당 엔드포인트를 로컬에서만 가능하도록 허용 함으로써 헬스 체크 기능을 대신 함
    location /nginx_status {
        # nginx의 상태 정보를 출력함
        stub_status on;

        # 요청을 허용한 아이피
        allow 127.0.0.1;

        # 모든 요청을 차단함
        deny all;
    }

    # HTTPS 설정 (optional, SSL 인증서 추가)
    # listen 443 ssl;
    # ssl_certificate /path/to/certificate.crt;
    # ssl_certificate_key /path/to/private.key;
}